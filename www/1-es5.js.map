{"version":3,"sources":["/./node_modules/@ionic/core/dist/esm-es5/index-8421816f.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AACxB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,+DAA+D,UAAU,2BAA2B,EAAE;AACtgBAAgB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,gBAAgB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,aAAa;AACb,2DAA2D,QAAQ,EAAE;AACrqCAAqC,uGAAuG;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC6C","file":"1-es5.js","sourcesContent":["import { w as writeTask } from './chunk-84f6bf13.js';\r\nimport './chunk-1074393c.js';\r\nvar GestureController = /** @class */ (function () {\r\n    function GestureController() {\r\n        this.gestureId = 0;\r\n        this.requestedStart = new Map();\r\n        this.disabledGestures = new Map();\r\n        this.disabledScroll = new Set();\r\n    }\r\n    /**\r\n     * Creates a gesture delegate based on the GestureConfig passed\r\n     */\r\n    GestureController.prototype.createGesture = function (config) {\r\n        return new GestureDelegate(this, this.newID(), config.name, config.priority || 0, !!config.disableScroll);\r\n    };\r\n    /**\r\n     * Creates a blocker that will block any other gesture events from firing. Set in the ion-gesture component.\r\n     */\r\n    GestureController.prototype.createBlocker = function (opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        return new BlockerDelegate(this, this.newID(), opts.disable, !!opts.disableScroll);\r\n    };\r\n    GestureController.prototype.start = function (gestureName, id, priority) {\r\n        if (!this.canStart(gestureName)) {\r\n            this.requestedStart.delete(id);\r\n            return false;\r\n        }\r\n        this.requestedStart.set(id, priority);\r\n        return true;\r\n    };\r\n    GestureController.prototype.capture = function (gestureName, id, priority) {\r\n        if (!this.start(gestureName, id, priority)) {\r\n            return false;\r\n        }\r\n        var requestedStart = this.requestedStart;\r\n        var maxPriority = -10000;\r\n        requestedStart.forEach(function (value) {\r\n            maxPriority = Math.max(maxPriority, value);\r\n        });\r\n        if (maxPriority === priority) {\r\n            this.capturedId = id;\r\n            requestedStart.clear();\r\n            var event = new CustomEvent('ionGestureCaptured', { detail: { gestureName: gestureName } });\r\n            document.dispatchEvent(event);\r\n            return true;\r\n        }\r\n        requestedStart.delete(id);\r\n        return false;\r\n    };\r\n    GestureController.prototype.release = function (id) {\r\n        this.requestedStart.delete(id);\r\n        if (this.capturedId === id) {\r\n            this.capturedId = undefined;\r\n        }\r\n    };\r\n    GestureController.prototype.disableGesture = function (gestureName, id) {\r\n        var set = this.disabledGestures.get(gestureName);\r\n        if (set === undefined) {\r\n            set = new Set();\r\n            this.disabledGestures.set(gestureName, set);\r\n        }\r\n        set.add(id);\r\n    };\r\n    GestureController.prototype.enableGesture = function (gestureName, id) {\r\n        var set = this.disabledGestures.get(gestureName);\r\n        if (set !== undefined) {\r\n            set.delete(id);\r\n        }\r\n    };\r\n    GestureController.prototype.disableScroll = function (id) {\r\n        this.disabledScroll.add(id);\r\n        if (this.disabledScroll.size === 1) {\r\n            document.body.classList.add(BACKDROP_NO_SCROLL);\r\n        }\r\n    };\r\n    GestureController.prototype.enableScroll = function (id) {\r\n        this.disabledScroll.delete(id);\r\n        if (this.disabledScroll.size === 0) {\r\n            document.body.classList.remove(BACKDROP_NO_SCROLL);\r\n        }\r\n    };\r\n    GestureController.prototype.canStart = function (gestureName) {\r\n        if (this.capturedId !== undefined) {\r\n            // a gesture already captured\r\n            return false;\r\n        }\r\n        if (this.isDisabled(gestureName)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    GestureController.prototype.isCaptured = function () {\r\n        return this.capturedId !== undefined;\r\n    };\r\n    GestureController.prototype.isScrollDisabled = function () {\r\n        return this.disabledScroll.size > 0;\r\n    };\r\n    GestureController.prototype.isDisabled = function (gestureName) {\r\n        var disabled = this.disabledGestures.get(gestureName);\r\n        if (disabled && disabled.size > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    GestureController.prototype.newID = function () {\r\n        this.gestureId++;\r\n        return this.gestureId;\r\n    };\r\n    return GestureController;\r\n}());\r\nvar GestureDelegate = /** @class */ (function () {\r\n    function GestureDelegate(ctrl, id, name, priority, disableScroll) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.disableScroll = disableScroll;\r\n        this.priority = priority * 1000000 + id;\r\n        this.ctrl = ctrl;\r\n    }\r\n    GestureDelegate.prototype.canStart = function () {\r\n        if (!this.ctrl) {\r\n            return false;\r\n        }\r\n        return this.ctrl.canStart(this.name);\r\n    };\r\n    GestureDelegate.prototype.start = function () {\r\n        if (!this.ctrl) {\r\n            return false;\r\n        }\r\n        return this.ctrl.start(this.name, this.id, this.priority);\r\n    };\r\n    GestureDelegate.prototype.capture = function () {\r\n        if (!this.ctrl) {\r\n            return false;\r\n        }\r\n        var captured = this.ctrl.capture(this.name, this.id, this.priority);\r\n        if (captured && this.disableScroll) {\r\n            this.ctrl.disableScroll(this.id);\r\n        }\r\n        return captured;\r\n    };\r\n    GestureDelegate.prototype.release = function () {\r\n        if (this.ctrl) {\r\n            this.ctrl.release(this.id);\r\n            if (this.disableScroll) {\r\n                this.ctrl.enableScroll(this.id);\r\n            }\r\n        }\r\n    };\r\n    GestureDelegate.prototype.destroy = function () {\r\n        this.release();\r\n        this.ctrl = undefined;\r\n    };\r\n    return GestureDelegate;\r\n}());\r\nvar BlockerDelegate = /** @class */ (function () {\r\n    function BlockerDelegate(ctrl, id, disable, disableScroll) {\r\n        this.id = id;\r\n        this.disable = disable;\r\n        this.disableScroll = disableScroll;\r\n        this.ctrl = ctrl;\r\n    }\r\n    BlockerDelegate.prototype.block = function () {\r\n        if (!this.ctrl) {\r\n            return;\r\n        }\r\n        if (this.disable) {\r\n            for (var _i = 0, _a = this.disable; _i < _a.length; _i++) {\r\n                var gesture = _a[_i];\r\n                this.ctrl.disableGesture(gesture, this.id);\r\n            }\r\n        }\r\n        if (this.disableScroll) {\r\n            this.ctrl.disableScroll(this.id);\r\n        }\r\n    };\r\n    BlockerDelegate.prototype.unblock = function () {\r\n        if (!this.ctrl) {\r\n            return;\r\n        }\r\n        if (this.disable) {\r\n            for (var _i = 0, _a = this.disable; _i < _a.length; _i++) {\r\n                var gesture = _a[_i];\r\n                this.ctrl.enableGesture(gesture, this.id);\r\n            }\r\n        }\r\n        if (this.disableScroll) {\r\n            this.ctrl.enableScroll(this.id);\r\n        }\r\n    };\r\n    BlockerDelegate.prototype.destroy = function () {\r\n        this.unblock();\r\n        this.ctrl = undefined;\r\n    };\r\n    return BlockerDelegate;\r\n}());\r\nvar BACKDROP_NO_SCROLL = 'backdrop-no-scroll';\r\nvar GESTURE_CONTROLLER = new GestureController();\r\nvar addEventListener = function (el, eventName, callback, opts) {\r\n    // use event listener options when supported\r\n    // otherwise it's just a boolean for the \"capture\" arg\r\n    var listenerOpts = supportsPassive(el) ? {\r\n        'capture': !!opts.capture,\r\n        'passive': !!opts.passive,\r\n    } : !!opts.capture;\r\n    var add;\r\n    var remove;\r\n    if (el['__zone_symbol__addEventListener']) {\r\n        add = '__zone_symbol__addEventListener';\r\n        remove = '__zone_symbol__removeEventListener';\r\n    }\r\n    else {\r\n        add = 'addEventListener';\r\n        remove = 'removeEventListener';\r\n    }\r\n    el[add](eventName, callback, listenerOpts);\r\n    return function () {\r\n        el[remove](eventName, callback, listenerOpts);\r\n    };\r\n};\r\nvar supportsPassive = function (node) {\r\n    if (_sPassive === undefined) {\r\n        try {\r\n            var opts = Object.defineProperty({}, 'passive', {\r\n                get: function () {\r\n                    _sPassive = true;\r\n                }\r\n            });\r\n            node.addEventListener('optsTest', function () { return; }, opts);\r\n        }\r\n        catch (e) {\r\n            _sPassive = false;\r\n        }\r\n    }\r\n    return !!_sPassive;\r\n};\r\nvar _sPassive;\r\nvar MOUSE_WAIT = 2000;\r\nvar createPointerEvents = function (el, pointerDown, pointerMove, pointerUp, options) {\r\n    var rmTouchStart;\r\n    var rmTouchMove;\r\n    var rmTouchEnd;\r\n    var rmTouchCancel;\r\n    var rmMouseStart;\r\n    var rmMouseMove;\r\n    var rmMouseUp;\r\n    var lastTouchEvent = 0;\r\n    var handleTouchStart = function (ev) {\r\n        lastTouchEvent = Date.now() + MOUSE_WAIT;\r\n        if (!pointerDown(ev)) {\r\n            return;\r\n        }\r\n        if (!rmTouchMove && pointerMove) {\r\n            rmTouchMove = addEventListener(el, 'touchmove', pointerMove, options);\r\n        }\r\n        if (!rmTouchEnd) {\r\n            rmTouchEnd = addEventListener(el, 'touchend', handleTouchEnd, options);\r\n        }\r\n        if (!rmTouchCancel) {\r\n            rmTouchCancel = addEventListener(el, 'touchcancel', handleTouchEnd, options);\r\n        }\r\n    };\r\n    var handleMouseDown = function (ev) {\r\n        if (lastTouchEvent > Date.now()) {\r\n            return;\r\n        }\r\n        if (!pointerDown(ev)) {\r\n            return;\r\n        }\r\n        if (!rmMouseMove && pointerMove) {\r\n            rmMouseMove = addEventListener(getDocument(el), 'mousemove', pointerMove, options);\r\n        }\r\n        if (!rmMouseUp) {\r\n            rmMouseUp = addEventListener(getDocument(el), 'mouseup', handleMouseUp, options);\r\n        }\r\n    };\r\n    var handleTouchEnd = function (ev) {\r\n        stopTouch();\r\n        if (pointerUp) {\r\n            pointerUp(ev);\r\n        }\r\n    };\r\n    var handleMouseUp = function (ev) {\r\n        stopMouse();\r\n        if (pointerUp) {\r\n            pointerUp(ev);\r\n        }\r\n    };\r\n    var stopTouch = function () {\r\n        if (rmTouchMove) {\r\n            rmTouchMove();\r\n        }\r\n        if (rmTouchEnd) {\r\n            rmTouchEnd();\r\n        }\r\n        if (rmTouchCancel) {\r\n            rmTouchCancel();\r\n        }\r\n        rmTouchMove = rmTouchEnd = rmTouchCancel = undefined;\r\n    };\r\n    var stopMouse = function () {\r\n        if (rmMouseMove) {\r\n            rmMouseMove();\r\n        }\r\n        if (rmMouseUp) {\r\n            rmMouseUp();\r\n        }\r\n        rmMouseMove = rmMouseUp = undefined;\r\n    };\r\n    var stop = function () {\r\n        stopTouch();\r\n        stopMouse();\r\n    };\r\n    var setDisabled = function (disabled) {\r\n        if (disabled) {\r\n            if (rmTouchStart) {\r\n                rmTouchStart();\r\n            }\r\n            if (rmMouseStart) {\r\n                rmMouseStart();\r\n            }\r\n            rmTouchStart = rmMouseStart = undefined;\r\n            stop();\r\n        }\r\n        else {\r\n            if (!rmTouchStart) {\r\n                rmTouchStart = addEventListener(el, 'touchstart', handleTouchStart, options);\r\n            }\r\n            if (!rmMouseStart) {\r\n                rmMouseStart = addEventListener(el, 'mousedown', handleMouseDown, options);\r\n            }\r\n        }\r\n    };\r\n    var destroy = function () {\r\n        setDisabled(true);\r\n        pointerUp = pointerMove = pointerDown = undefined;\r\n    };\r\n    return {\r\n        setDisabled: setDisabled,\r\n        stop: stop,\r\n        destroy: destroy\r\n    };\r\n};\r\nvar getDocument = function (node) {\r\n    return node instanceof Document ? node : node.ownerDocument;\r\n};\r\nvar createPanRecognizer = function (direction, thresh, maxAngle) {\r\n    var radians = maxAngle * (Math.PI / 180);\r\n    var isDirX = direction === 'x';\r\n    var maxCosine = Math.cos(radians);\r\n    var threshold = thresh * thresh;\r\n    var startX = 0;\r\n    var startY = 0;\r\n    var dirty = false;\r\n    var isPan = 0;\r\n    return {\r\n        start: function (x, y) {\r\n            startX = x;\r\n            startY = y;\r\n            isPan = 0;\r\n            dirty = true;\r\n        },\r\n        detect: function (x, y) {\r\n            if (!dirty) {\r\n                return false;\r\n            }\r\n            var deltaX = (x - startX);\r\n            var deltaY = (y - startY);\r\n            var distance = deltaX * deltaX + deltaY * deltaY;\r\n            if (distance < threshold) {\r\n                return false;\r\n            }\r\n            var hypotenuse = Math.sqrt(distance);\r\n            var cosine = (isDirX ? deltaX : deltaY) / hypotenuse;\r\n            if (cosine > maxCosine) {\r\n                isPan = 1;\r\n            }\r\n            else if (cosine < -maxCosine) {\r\n                isPan = -1;\r\n            }\r\n            else {\r\n                isPan = 0;\r\n            }\r\n            dirty = false;\r\n            return true;\r\n        },\r\n        isGesture: function () {\r\n            return isPan !== 0;\r\n        },\r\n        getDirection: function () {\r\n            return isPan;\r\n        }\r\n    };\r\n};\r\nvar createGesture = function (config) {\r\n    var hasCapturedPan = false;\r\n    var hasStartedPan = false;\r\n    var hasFiredStart = true;\r\n    var isMoveQueued = false;\r\n    var finalConfig = Object.assign({ disableScroll: false, direction: 'x', gesturePriority: 0, passive: true, maxAngle: 40, threshold: 10 }, config);\r\n    var canStart = finalConfig.canStart;\r\n    var onWillStart = finalConfig.onWillStart;\r\n    var onStart = finalConfig.onStart;\r\n    var onEnd = finalConfig.onEnd;\r\n    var notCaptured = finalConfig.notCaptured;\r\n    var onMove = finalConfig.onMove;\r\n    var threshold = finalConfig.threshold;\r\n    var detail = {\r\n        type: 'pan',\r\n        startX: 0,\r\n        startY: 0,\r\n        startTimeStamp: 0,\r\n        currentX: 0,\r\n        currentY: 0,\r\n        velocityX: 0,\r\n        velocityY: 0,\r\n        deltaX: 0,\r\n        deltaY: 0,\r\n        timeStamp: 0,\r\n        event: undefined,\r\n        data: undefined\r\n    };\r\n    var pan = createPanRecognizer(finalConfig.direction, finalConfig.threshold, finalConfig.maxAngle);\r\n    var gesture = GESTURE_CONTROLLER.createGesture({\r\n        name: config.gestureName,\r\n        priority: config.gesturePriority,\r\n        disableScroll: config.disableScroll\r\n    });\r\n    var pointerDown = function (ev) {\r\n        var timeStamp = now(ev);\r\n        if (hasStartedPan || !hasFiredStart) {\r\n            return false;\r\n        }\r\n        updateDetail(ev, detail);\r\n        detail.startX = detail.currentX;\r\n        detail.startY = detail.currentY;\r\n        detail.startTimeStamp = detail.timeStamp = timeStamp;\r\n        detail.velocityX = detail.velocityY = detail.deltaX = detail.deltaY = 0;\r\n        detail.event = ev;\r\n        // Check if gesture can start\r\n        if (canStart && canStart(detail) === false) {\r\n            return false;\r\n        }\r\n        // Release fallback\r\n        gesture.release();\r\n        // Start gesture\r\n        if (!gesture.start()) {\r\n            return false;\r\n        }\r\n        hasStartedPan = true;\r\n        if (threshold === 0) {\r\n            return tryToCapturePan();\r\n        }\r\n        pan.start(detail.startX, detail.startY);\r\n        return true;\r\n    };\r\n    var pointerMove = function (ev) {\r\n        // fast path, if gesture is currently captured\r\n        // do minimum job to get user-land even dispatched\r\n        if (hasCapturedPan) {\r\n            if (!isMoveQueued && hasFiredStart) {\r\n                isMoveQueued = true;\r\n                calcGestureData(detail, ev);\r\n                writeTask(fireOnMove);\r\n            }\r\n            return;\r\n        }\r\n        // gesture is currently being detected\r\n        calcGestureData(detail, ev);\r\n        if (pan.detect(detail.currentX, detail.currentY)) {\r\n            if (!pan.isGesture() || !tryToCapturePan()) {\r\n                abortGesture();\r\n            }\r\n        }\r\n    };\r\n    var fireOnMove = function () {\r\n        // Since fireOnMove is called inside a RAF, onEnd() might be called,\r\n        // we must double check hasCapturedPan\r\n        if (!hasCapturedPan) {\r\n            return;\r\n        }\r\n        isMoveQueued = false;\r\n        if (onMove) {\r\n            onMove(detail);\r\n        }\r\n    };\r\n    var tryToCapturePan = function () {\r\n        if (gesture && !gesture.capture()) {\r\n            return false;\r\n        }\r\n        hasCapturedPan = true;\r\n        hasFiredStart = false;\r\n        // reset start position since the real user-land event starts here\r\n        // If the pan detector threshold is big, not resetting the start position\r\n        // will cause a jump in the animation equal to the detector threshold.\r\n        // the array of positions used to calculate the gesture velocity does not\r\n        // need to be cleaned, more points in the positions array always results in a\r\n        // more accurate value of the velocity.\r\n        detail.startX = detail.currentX;\r\n        detail.startY = detail.currentY;\r\n        detail.startTimeStamp = detail.timeStamp;\r\n        if (onWillStart) {\r\n            onWillStart(detail).then(fireOnStart);\r\n        }\r\n        else {\r\n            fireOnStart();\r\n        }\r\n        return true;\r\n    };\r\n    var fireOnStart = function () {\r\n        if (onStart) {\r\n            onStart(detail);\r\n        }\r\n        hasFiredStart = true;\r\n    };\r\n    var reset = function () {\r\n        hasCapturedPan = false;\r\n        hasStartedPan = false;\r\n        isMoveQueued = false;\r\n        hasFiredStart = true;\r\n        gesture.release();\r\n    };\r\n    // END *************************\r\n    var pointerUp = function (ev) {\r\n        var tmpHasCaptured = hasCapturedPan;\r\n        var tmpHasFiredStart = hasFiredStart;\r\n        reset();\r\n        if (!tmpHasFiredStart) {\r\n            return;\r\n        }\r\n        calcGestureData(detail, ev);\r\n        // Try to capture press\r\n        if (tmpHasCaptured) {\r\n            if (onEnd) {\r\n                onEnd(detail);\r\n            }\r\n            return;\r\n        }\r\n        // Not captured any event\r\n        if (notCaptured) {\r\n            notCaptured(detail);\r\n        }\r\n    };\r\n    var pointerEvents = createPointerEvents(finalConfig.el, pointerDown, pointerMove, pointerUp, {\r\n        capture: false,\r\n    });\r\n    var abortGesture = function () {\r\n        reset();\r\n        pointerEvents.stop();\r\n        if (notCaptured) {\r\n            notCaptured(detail);\r\n        }\r\n    };\r\n    return {\r\n        setDisabled: function (disabled) {\r\n            if (disabled && hasCapturedPan) {\r\n                pointerUp(undefined);\r\n            }\r\n            pointerEvents.setDisabled(disabled);\r\n        },\r\n        destroy: function () {\r\n            gesture.destroy();\r\n            pointerEvents.destroy();\r\n        }\r\n    };\r\n};\r\nvar calcGestureData = function (detail, ev) {\r\n    if (!ev) {\r\n        return;\r\n    }\r\n    var prevX = detail.currentX;\r\n    var prevY = detail.currentY;\r\n    var prevT = detail.timeStamp;\r\n    updateDetail(ev, detail);\r\n    var currentX = detail.currentX;\r\n    var currentY = detail.currentY;\r\n    var timestamp = detail.timeStamp = now(ev);\r\n    var timeDelta = timestamp - prevT;\r\n    if (timeDelta > 0 && timeDelta < 100) {\r\n        var velocityX = (currentX - prevX) / timeDelta;\r\n        var velocityY = (currentY - prevY) / timeDelta;\r\n        detail.velocityX = velocityX * 0.7 + detail.velocityX * 0.3;\r\n        detail.velocityY = velocityY * 0.7 + detail.velocityY * 0.3;\r\n    }\r\n    detail.deltaX = currentX - detail.startX;\r\n    detail.deltaY = currentY - detail.startY;\r\n    detail.event = ev;\r\n};\r\nvar updateDetail = function (ev, detail) {\r\n    // get X coordinates for either a mouse click\r\n    // or a touch depending on the given event\r\n    var x = 0;\r\n    var y = 0;\r\n    if (ev) {\r\n        var changedTouches = ev.changedTouches;\r\n        if (changedTouches && changedTouches.length > 0) {\r\n            var touch = changedTouches[0];\r\n            x = touch.clientX;\r\n            y = touch.clientY;\r\n        }\r\n        else if (ev.pageX !== undefined) {\r\n            x = ev.pageX;\r\n            y = ev.pageY;\r\n        }\r\n    }\r\n    detail.currentX = x;\r\n    detail.currentY = y;\r\n};\r\nvar now = function (ev) {\r\n    return ev.timeStamp || Date.now();\r\n};\r\nexport { GESTURE_CONTROLLER, createGesture };\r\n"],"sourceRoot":""}