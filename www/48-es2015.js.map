{"version":3,"sources":["/./node_modules/@ionic/core/dist/esm/ion-radio_2-md.entry.js"],"names":[],"mappings":"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","file":"48-es2015.js","sourcesContent":["import { r as registerInstance, c as createEvent, d as getIonMode, h, H as Host, e as getElement } from './chunk-84f6bf13.js';\r\nimport './chunk-1074393c.js';\r\nimport { c as createColorClasses, h as hostContext } from './chunk-ba834eff.js';\r\nimport { f as findItemLabel } from './chunk-c90aaa66.js';\r\n\r\n/**\r\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\r\n */\r\nclass Radio {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.inputId = `ion-rb-${radioButtonIds++}`;\r\n        /**\r\n         * The name of the control, which is submitted with the form data.\r\n         */\r\n        this.name = this.inputId;\r\n        /**\r\n         * If `true`, the user cannot interact with the radio.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * If `true`, the radio is selected.\r\n         */\r\n        this.checked = false;\r\n        this.onFocus = () => {\r\n            this.ionFocus.emit();\r\n        };\r\n        this.onBlur = () => {\r\n            this.ionBlur.emit();\r\n        };\r\n        this.onClick = () => {\r\n            if (this.checked) {\r\n                this.ionDeselect.emit();\r\n            }\r\n            else {\r\n                this.checked = true;\r\n            }\r\n        };\r\n        this.ionRadioDidLoad = createEvent(this, \"ionRadioDidLoad\", 7);\r\n        this.ionRadioDidUnload = createEvent(this, \"ionRadioDidUnload\", 7);\r\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\r\n        this.ionSelect = createEvent(this, \"ionSelect\", 7);\r\n        this.ionDeselect = createEvent(this, \"ionDeselect\", 7);\r\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\r\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\r\n    }\r\n    colorChanged() {\r\n        this.emitStyle();\r\n    }\r\n    checkedChanged(isChecked) {\r\n        if (isChecked) {\r\n            this.ionSelect.emit({\r\n                checked: true,\r\n                value: this.value\r\n            });\r\n        }\r\n        this.emitStyle();\r\n    }\r\n    disabledChanged() {\r\n        this.emitStyle();\r\n    }\r\n    componentWillLoad() {\r\n        if (this.value === undefined) {\r\n            this.value = this.inputId;\r\n        }\r\n        this.emitStyle();\r\n    }\r\n    componentDidLoad() {\r\n        this.ionRadioDidLoad.emit();\r\n    }\r\n    componentDidUnload() {\r\n        this.ionRadioDidUnload.emit();\r\n    }\r\n    emitStyle() {\r\n        this.ionStyle.emit({\r\n            'radio-checked': this.checked,\r\n            'interactive-disabled': this.disabled,\r\n        });\r\n    }\r\n    render() {\r\n        const { inputId, disabled, checked, color, el } = this;\r\n        const mode = getIonMode(this);\r\n        const labelId = inputId + '-lbl';\r\n        const label = findItemLabel(el);\r\n        if (label) {\r\n            label.id = labelId;\r\n        }\r\n        return (h(Host, { onClick: this.onClick, role: \"radio\", \"aria-disabled\": disabled ? 'true' : null, \"aria-checked\": `${checked}`, \"aria-labelledby\": labelId, class: Object.assign({}, createColorClasses(color), { [mode]: true, 'in-item': hostContext('ion-item', el), 'interactive': true, 'radio-checked': checked, 'radio-disabled': disabled }) }, h(\"div\", { class: \"radio-icon\" }, h(\"div\", { class: \"radio-inner\" })), h(\"button\", { type: \"button\", onFocus: this.onFocus, onBlur: this.onBlur, disabled: disabled })));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"color\": [\"colorChanged\"],\r\n        \"checked\": [\"checkedChanged\"],\r\n        \"disabled\": [\"disabledChanged\"]\r\n    }; }\r\n    static get style() { return \":host{display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;contain:layout size style}.radio-icon,button{width:100%;height:100%}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}:host-context([dir=rtl]) button,[dir=rtl] button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}:host{--color:var(--ion-color-step-400,#999);--color-checked:var(--ion-color-primary,#3880ff);--border-width:2px;--border-style:solid;width:20px;height:20px}:host(.ion-color) .radio-inner{background:var(--ion-color-base)}:host(.ion-color.radio-checked) .radio-icon{border-color:var(--ion-color-base)}.radio-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;border-radius:50%;border-width:var(--border-width);border-style:var(--border-style);border-color:var(--color)}.radio-inner{border-radius:50%;width:calc(50% + var(--border-width));height:calc(50% + var(--border-width));-webkit-transform:scale3d(0,0,0);transform:scale3d(0,0,0);-webkit-transition:-webkit-transform .28s cubic-bezier(.4,0,.2,1);transition:-webkit-transform .28s cubic-bezier(.4,0,.2,1);transition:transform .28s cubic-bezier(.4,0,.2,1);transition:transform .28s cubic-bezier(.4,0,.2,1),-webkit-transform .28s cubic-bezier(.4,0,.2,1);background:var(--color-checked)}:host(.radio-checked) .radio-icon{border-color:var(--color-checked)}:host(.radio-checked) .radio-inner{-webkit-transform:scaleX(1);transform:scaleX(1)}:host(.radio-disabled){opacity:.3}:host(.ion-focused) .radio-icon:after{border-radius:50%;left:-12px;top:-12px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint,#4c8dff);content:\\\"\\\";opacity:.2}:host-context([dir=rtl]).ion-focused .radio-icon:after,:host-context([dir=rtl]):host(.ion-focused) .radio-icon:after{left:unset;right:unset;right:-12px}:host(.in-item){margin-left:0;margin-right:0;margin-top:9px;margin-bottom:9px;display:block;position:static}:host(.in-item[slot=start]){margin-left:4px;margin-right:36px;margin-top:11px;margin-bottom:10px}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:4px;margin-inline-start:4px;-webkit-margin-end:36px;margin-inline-end:36px}}\"; }\r\n}\r\nlet radioButtonIds = 0;\r\n\r\nclass RadioGroup {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.inputId = `ion-rg-${radioGroupIds++}`;\r\n        this.labelId = `${this.inputId}-lbl`;\r\n        this.radios = [];\r\n        /**\r\n         * If `true`, the radios can be deselected.\r\n         */\r\n        this.allowEmptySelection = false;\r\n        /**\r\n         * The name of the control, which is submitted with the form data.\r\n         */\r\n        this.name = this.inputId;\r\n        this.ionChange = createEvent(this, \"ionChange\", 7);\r\n    }\r\n    valueChanged(value) {\r\n        this.updateRadios();\r\n        this.ionChange.emit({ value });\r\n    }\r\n    onRadioDidLoad(ev) {\r\n        const radio = ev.target;\r\n        radio.name = this.name;\r\n        // add radio to internal list\r\n        this.radios.push(radio);\r\n        // this radio-group does not have a value\r\n        // but this radio is checked, so let's set the\r\n        // radio-group's value from the checked radio\r\n        if (this.value == null && radio.checked) {\r\n            this.value = radio.value;\r\n        }\r\n        else {\r\n            this.updateRadios();\r\n        }\r\n    }\r\n    onRadioDidUnload(ev) {\r\n        const index = this.radios.indexOf(ev.target);\r\n        if (index > -1) {\r\n            this.radios.splice(index, 1);\r\n        }\r\n    }\r\n    onRadioSelect(ev) {\r\n        const selectedRadio = ev.target;\r\n        if (selectedRadio) {\r\n            this.value = selectedRadio.value;\r\n        }\r\n    }\r\n    onRadioDeselect(ev) {\r\n        if (this.allowEmptySelection) {\r\n            const selectedRadio = ev.target;\r\n            if (selectedRadio) {\r\n                selectedRadio.checked = false;\r\n                this.value = undefined;\r\n            }\r\n        }\r\n    }\r\n    componentDidLoad() {\r\n        // Get the list header if it exists and set the id\r\n        // this is used to set aria-labelledby\r\n        let header = this.el.querySelector('ion-list-header');\r\n        if (!header) {\r\n            header = this.el.querySelector('ion-item-divider');\r\n        }\r\n        if (header) {\r\n            const label = header.querySelector('ion-label');\r\n            if (label) {\r\n                this.labelId = label.id = this.name + '-lbl';\r\n            }\r\n        }\r\n        this.updateRadios();\r\n    }\r\n    updateRadios() {\r\n        const value = this.value;\r\n        let hasChecked = false;\r\n        for (const radio of this.radios) {\r\n            if (!hasChecked && radio.value === value) {\r\n                // correct value for this radio\r\n                // but this radio isn't checked yet\r\n                // and we haven't found a checked yet\r\n                hasChecked = true;\r\n                radio.checked = true;\r\n            }\r\n            else {\r\n                // this radio doesn't have the correct value\r\n                // or the radio group has been already checked\r\n                radio.checked = false;\r\n            }\r\n        }\r\n    }\r\n    hostData() {\r\n        const mode = getIonMode(this);\r\n        return {\r\n            'role': 'radiogroup',\r\n            'aria-labelledby': this.labelId,\r\n            class: {\r\n                [mode]: true,\r\n            }\r\n        };\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"value\": [\"valueChanged\"]\r\n    }; }\r\n    render() { return h(Host, this.hostData()); }\r\n}\r\nlet radioGroupIds = 0;\r\n\r\nexport { Radio as ion_radio, RadioGroup as ion_radio_group };\r\n"],"sourceRoot":""}