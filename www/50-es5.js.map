{"version":3,"sources":["/./node_modules/@ionic/core/dist/esm-es5/ion-radio_2-md.entry.js"],"names":[],"mappings":"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","file":"50-es5.js","sourcesContent":["import { r as registerInstance, c as createEvent, d as getIonMode, h, H as Host, e as getElement } from './chunk-84f6bf13.js';\r\nimport './chunk-1074393c.js';\r\nimport { c as createColorClasses, h as hostContext } from './chunk-ba834eff.js';\r\nimport { f as findItemLabel } from './chunk-c90aaa66.js';\r\n/**\r\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\r\n */\r\nvar Radio = /** @class */ (function () {\r\n    function Radio(hostRef) {\r\n        var _this = this;\r\n        registerInstance(this, hostRef);\r\n        this.inputId = \"ion-rb-\" + radioButtonIds++;\r\n        /**\r\n         * The name of the control, which is submitted with the form data.\r\n         */\r\n        this.name = this.inputId;\r\n        /**\r\n         * If `true`, the user cannot interact with the radio.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * If `true`, the radio is selected.\r\n         */\r\n        this.checked = false;\r\n        this.onFocus = function () {\r\n            _this.ionFocus.emit();\r\n        };\r\n        this.onBlur = function () {\r\n            _this.ionBlur.emit();\r\n        };\r\n        this.onClick = function () {\r\n            if (_this.checked) {\r\n                _this.ionDeselect.emit();\r\n            }\r\n            else {\r\n                _this.checked = true;\r\n            }\r\n        };\r\n        this.ionRadioDidLoad = createEvent(this, \"ionRadioDidLoad\", 7);\r\n        this.ionRadioDidUnload = createEvent(this, \"ionRadioDidUnload\", 7);\r\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\r\n        this.ionSelect = createEvent(this, \"ionSelect\", 7);\r\n        this.ionDeselect = createEvent(this, \"ionDeselect\", 7);\r\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\r\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\r\n    }\r\n    Radio.prototype.colorChanged = function () {\r\n        this.emitStyle();\r\n    };\r\n    Radio.prototype.checkedChanged = function (isChecked) {\r\n        if (isChecked) {\r\n            this.ionSelect.emit({\r\n                checked: true,\r\n                value: this.value\r\n            });\r\n        }\r\n        this.emitStyle();\r\n    };\r\n    Radio.prototype.disabledChanged = function () {\r\n        this.emitStyle();\r\n    };\r\n    Radio.prototype.componentWillLoad = function () {\r\n        if (this.value === undefined) {\r\n            this.value = this.inputId;\r\n        }\r\n        this.emitStyle();\r\n    };\r\n    Radio.prototype.componentDidLoad = function () {\r\n        this.ionRadioDidLoad.emit();\r\n    };\r\n    Radio.prototype.componentDidUnload = function () {\r\n        this.ionRadioDidUnload.emit();\r\n    };\r\n    Radio.prototype.emitStyle = function () {\r\n        this.ionStyle.emit({\r\n            'radio-checked': this.checked,\r\n            'interactive-disabled': this.disabled,\r\n        });\r\n    };\r\n    Radio.prototype.render = function () {\r\n        var _a;\r\n        var _b = this, inputId = _b.inputId, disabled = _b.disabled, checked = _b.checked, color = _b.color, el = _b.el;\r\n        var mode = getIonMode(this);\r\n        var labelId = inputId + '-lbl';\r\n        var label = findItemLabel(el);\r\n        if (label) {\r\n            label.id = labelId;\r\n        }\r\n        return (h(Host, { onClick: this.onClick, role: \"radio\", \"aria-disabled\": disabled ? 'true' : null, \"aria-checked\": \"\" + checked, \"aria-labelledby\": labelId, class: Object.assign({}, createColorClasses(color), (_a = {}, _a[mode] = true, _a['in-item'] = hostContext('ion-item', el), _a['interactive'] = true, _a['radio-checked'] = checked, _a['radio-disabled'] = disabled, _a)) }, h(\"div\", { class: \"radio-icon\" }, h(\"div\", { class: \"radio-inner\" })), h(\"button\", { type: \"button\", onFocus: this.onFocus, onBlur: this.onBlur, disabled: disabled })));\r\n    };\r\n    Object.defineProperty(Radio.prototype, \"el\", {\r\n        get: function () { return getElement(this); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Radio, \"watchers\", {\r\n        get: function () {\r\n            return {\r\n                \"color\": [\"colorChanged\"],\r\n                \"checked\": [\"checkedChanged\"],\r\n                \"disabled\": [\"disabledChanged\"]\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Radio, \"style\", {\r\n        get: function () { return \":host{display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;contain:layout size style}.radio-icon,button{width:100%;height:100%}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}:host-context([dir=rtl]) button,[dir=rtl] button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}:host{--color:var(--ion-color-step-400,#999);--color-checked:var(--ion-color-primary,#3880ff);--border-width:2px;--border-style:solid;width:20px;height:20px}:host(.ion-color) .radio-inner{background:var(--ion-color-base)}:host(.ion-color.radio-checked) .radio-icon{border-color:var(--ion-color-base)}.radio-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;border-radius:50%;border-width:var(--border-width);border-style:var(--border-style);border-color:var(--color)}.radio-inner{border-radius:50%;width:calc(50% + var(--border-width));height:calc(50% + var(--border-width));-webkit-transform:scale3d(0,0,0);transform:scale3d(0,0,0);-webkit-transition:-webkit-transform .28s cubic-bezier(.4,0,.2,1);transition:-webkit-transform .28s cubic-bezier(.4,0,.2,1);transition:transform .28s cubic-bezier(.4,0,.2,1);transition:transform .28s cubic-bezier(.4,0,.2,1),-webkit-transform .28s cubic-bezier(.4,0,.2,1);background:var(--color-checked)}:host(.radio-checked) .radio-icon{border-color:var(--color-checked)}:host(.radio-checked) .radio-inner{-webkit-transform:scaleX(1);transform:scaleX(1)}:host(.radio-disabled){opacity:.3}:host(.ion-focused) .radio-icon:after{border-radius:50%;left:-12px;top:-12px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint,#4c8dff);content:\\\"\\\";opacity:.2}:host-context([dir=rtl]).ion-focused .radio-icon:after,:host-context([dir=rtl]):host(.ion-focused) .radio-icon:after{left:unset;right:unset;right:-12px}:host(.in-item){margin-left:0;margin-right:0;margin-top:9px;margin-bottom:9px;display:block;position:static}:host(.in-item[slot=start]){margin-left:4px;margin-right:36px;margin-top:11px;margin-bottom:10px}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:4px;margin-inline-start:4px;-webkit-margin-end:36px;margin-inline-end:36px}}\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Radio;\r\n}());\r\nvar radioButtonIds = 0;\r\nvar RadioGroup = /** @class */ (function () {\r\n    function RadioGroup(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.inputId = \"ion-rg-\" + radioGroupIds++;\r\n        this.labelId = this.inputId + \"-lbl\";\r\n        this.radios = [];\r\n        /**\r\n         * If `true`, the radios can be deselected.\r\n         */\r\n        this.allowEmptySelection = false;\r\n        /**\r\n         * The name of the control, which is submitted with the form data.\r\n         */\r\n        this.name = this.inputId;\r\n        this.ionChange = createEvent(this, \"ionChange\", 7);\r\n    }\r\n    RadioGroup.prototype.valueChanged = function (value) {\r\n        this.updateRadios();\r\n        this.ionChange.emit({ value: value });\r\n    };\r\n    RadioGroup.prototype.onRadioDidLoad = function (ev) {\r\n        var radio = ev.target;\r\n        radio.name = this.name;\r\n        // add radio to internal list\r\n        this.radios.push(radio);\r\n        // this radio-group does not have a value\r\n        // but this radio is checked, so let's set the\r\n        // radio-group's value from the checked radio\r\n        if (this.value == null && radio.checked) {\r\n            this.value = radio.value;\r\n        }\r\n        else {\r\n            this.updateRadios();\r\n        }\r\n    };\r\n    RadioGroup.prototype.onRadioDidUnload = function (ev) {\r\n        var index = this.radios.indexOf(ev.target);\r\n        if (index > -1) {\r\n            this.radios.splice(index, 1);\r\n        }\r\n    };\r\n    RadioGroup.prototype.onRadioSelect = function (ev) {\r\n        var selectedRadio = ev.target;\r\n        if (selectedRadio) {\r\n            this.value = selectedRadio.value;\r\n        }\r\n    };\r\n    RadioGroup.prototype.onRadioDeselect = function (ev) {\r\n        if (this.allowEmptySelection) {\r\n            var selectedRadio = ev.target;\r\n            if (selectedRadio) {\r\n                selectedRadio.checked = false;\r\n                this.value = undefined;\r\n            }\r\n        }\r\n    };\r\n    RadioGroup.prototype.componentDidLoad = function () {\r\n        // Get the list header if it exists and set the id\r\n        // this is used to set aria-labelledby\r\n        var header = this.el.querySelector('ion-list-header');\r\n        if (!header) {\r\n            header = this.el.querySelector('ion-item-divider');\r\n        }\r\n        if (header) {\r\n            var label = header.querySelector('ion-label');\r\n            if (label) {\r\n                this.labelId = label.id = this.name + '-lbl';\r\n            }\r\n        }\r\n        this.updateRadios();\r\n    };\r\n    RadioGroup.prototype.updateRadios = function () {\r\n        var value = this.value;\r\n        var hasChecked = false;\r\n        for (var _i = 0, _a = this.radios; _i < _a.length; _i++) {\r\n            var radio = _a[_i];\r\n            if (!hasChecked && radio.value === value) {\r\n                // correct value for this radio\r\n                // but this radio isn't checked yet\r\n                // and we haven't found a checked yet\r\n                hasChecked = true;\r\n                radio.checked = true;\r\n            }\r\n            else {\r\n                // this radio doesn't have the correct value\r\n                // or the radio group has been already checked\r\n                radio.checked = false;\r\n            }\r\n        }\r\n    };\r\n    RadioGroup.prototype.hostData = function () {\r\n        var _a;\r\n        var mode = getIonMode(this);\r\n        return {\r\n            'role': 'radiogroup',\r\n            'aria-labelledby': this.labelId,\r\n            class: (_a = {},\r\n                _a[mode] = true,\r\n                _a)\r\n        };\r\n    };\r\n    Object.defineProperty(RadioGroup.prototype, \"el\", {\r\n        get: function () { return getElement(this); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadioGroup, \"watchers\", {\r\n        get: function () {\r\n            return {\r\n                \"value\": [\"valueChanged\"]\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    RadioGroup.prototype.render = function () { return h(Host, this.hostData()); };\r\n    return RadioGroup;\r\n}());\r\nvar radioGroupIds = 0;\r\nexport { Radio as ion_radio, RadioGroup as ion_radio_group };\r\n"],"sourceRoot":""}