{"version":3,"sources":["/./node_modules/@ionic/core/dist/esm/ion-tab_2.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6G;AAChF;AAC8B;;AAE3D;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC;AACA;AACA;AACA,6CAA6C,IAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4DAAC;AAChB;AACA,cAAc,QAAQ,4DAAU,OAAO;AACvC,cAAc,QAAQ,4DAAC,CAAC,oDAAI,4CAA4C;AACxE,wBAAwB,4BAA4B,uBAAuB,EAAE;AAC7E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4DAAW;AACzC,iCAAiC,4DAAW;AAC5C,gCAAgC,4DAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,MAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,uCAAuC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uBAAuB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,CAAC,oDAAI,GAAG,yCAAyC,EAAE,4DAAC,UAAU,cAAc,GAAG,4DAAC,SAAS,sBAAsB,EAAE,4DAAC,iBAAiB,4DAAC,UAAU,iBAAiB;AAChL;AACA,cAAc,QAAQ,4DAAU,OAAO;AACvC,wBAAwB,eAAe,OAAO,QAAQ,MAAM,SAAS,oBAAoB,aAAa,kBAAkB,0BAA0B,sBAAsB,WAAW,YAAY,UAAU,kBAAkB,0BAA0B,YAAY,kBAAkB,WAAW,OAAO,EAAE;AACvS;;AAE4C","file":"70-es2015.js","sourcesContent":["import { r as registerInstance, h, e as getElement, H as Host, c as createEvent } from './chunk-84f6bf13.js';\r\nimport './chunk-1074393c.js';\r\nimport { a as attachComponent } from './chunk-00265c49.js';\r\n\r\nclass Tab {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.loaded = false;\r\n        /** @internal */\r\n        this.active = false;\r\n    }\r\n    componentWillLoad() {\r\n    }\r\n    /** Set the active component for the tab */\r\n    async setActive() {\r\n        await this.prepareLazyLoaded();\r\n        this.active = true;\r\n    }\r\n    async prepareLazyLoaded() {\r\n        if (!this.loaded && this.component != null) {\r\n            this.loaded = true;\r\n            try {\r\n                return attachComponent(this.delegate, this.el, this.component, ['ion-page']);\r\n            }\r\n            catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    hostData() {\r\n        const { tab, active, component } = this;\r\n        return {\r\n            'role': 'tabpanel',\r\n            'aria-hidden': !active ? 'true' : null,\r\n            'aria-labelledby': `tab-button-${tab}`,\r\n            'class': {\r\n                'ion-page': component === undefined,\r\n                'tab-hidden': !active\r\n            }\r\n        };\r\n    }\r\n    __stencil_render() {\r\n        return h(\"slot\", null);\r\n    }\r\n    get el() { return getElement(this); }\r\n    render() { return h(Host, this.hostData(), this.__stencil_render()); }\r\n    static get style() { return \":host(.tab-hidden){display:none!important}\"; }\r\n}\r\n\r\n/**\r\n * @slot - Content is placed between the named slots if provided without a slot.\r\n * @slot top - Content is placed at the top of the screen.\r\n * @slot bottom - Content is placed at the bottom of the screen.\r\n */\r\nclass Tabs {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.transitioning = false;\r\n        this.tabs = [];\r\n        /** @internal */\r\n        this.useRouter = false;\r\n        this.onTabClicked = (ev) => {\r\n            const { href, tab } = ev.detail;\r\n            const selectedTab = this.tabs.find(t => t.tab === tab);\r\n            if (this.useRouter && href !== undefined) {\r\n                const router = document.querySelector('ion-router');\r\n                if (router) {\r\n                    router.push(href);\r\n                }\r\n            }\r\n            else if (selectedTab) {\r\n                this.select(selectedTab);\r\n            }\r\n        };\r\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\r\n        this.ionTabsWillChange = createEvent(this, \"ionTabsWillChange\", 3);\r\n        this.ionTabsDidChange = createEvent(this, \"ionTabsDidChange\", 3);\r\n    }\r\n    componentWillLoad() {\r\n        if (!this.useRouter) {\r\n            this.useRouter = !!document.querySelector('ion-router') && !this.el.closest('[no-router]');\r\n        }\r\n        this.tabs = Array.from(this.el.querySelectorAll('ion-tab'));\r\n        this.initSelect().then(() => {\r\n            this.ionNavWillLoad.emit();\r\n            this.componentWillUpdate();\r\n        });\r\n    }\r\n    componentDidUnload() {\r\n        this.tabs.length = 0;\r\n        this.selectedTab = this.leavingTab = undefined;\r\n    }\r\n    componentWillUpdate() {\r\n        const tabBar = this.el.querySelector('ion-tab-bar');\r\n        if (tabBar) {\r\n            const tab = this.selectedTab ? this.selectedTab.tab : undefined;\r\n            tabBar.selectedTab = tab;\r\n        }\r\n    }\r\n    /**\r\n     * Select a tab by the value of its `tab` property or an element reference.\r\n     *\r\n     * @param tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property.\r\n     */\r\n    async select(tab) {\r\n        const selectedTab = await this.getTab(tab);\r\n        if (!this.shouldSwitch(selectedTab)) {\r\n            return false;\r\n        }\r\n        await this.setActive(selectedTab);\r\n        await this.notifyRouter();\r\n        this.tabSwitch();\r\n        return true;\r\n    }\r\n    /**\r\n     * Get a specific tab by the value of its `tab` property or an element reference.\r\n     *\r\n     * @param tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property.\r\n     */\r\n    async getTab(tab) {\r\n        const tabEl = (typeof tab === 'string')\r\n            ? this.tabs.find(t => t.tab === tab)\r\n            : tab;\r\n        if (!tabEl) {\r\n            console.error(`tab with id: \"${tabEl}\" does not exist`);\r\n        }\r\n        return tabEl;\r\n    }\r\n    /**\r\n     * Get the currently selected tab.\r\n     */\r\n    getSelected() {\r\n        return Promise.resolve(this.selectedTab ? this.selectedTab.tab : undefined);\r\n    }\r\n    /** @internal */\r\n    async setRouteId(id) {\r\n        const selectedTab = await this.getTab(id);\r\n        if (!this.shouldSwitch(selectedTab)) {\r\n            return { changed: false, element: this.selectedTab };\r\n        }\r\n        await this.setActive(selectedTab);\r\n        return {\r\n            changed: true,\r\n            element: this.selectedTab,\r\n            markVisible: () => this.tabSwitch(),\r\n        };\r\n    }\r\n    /** @internal */\r\n    async getRouteId() {\r\n        const tabId = this.selectedTab && this.selectedTab.tab;\r\n        return tabId !== undefined ? { id: tabId, element: this.selectedTab } : undefined;\r\n    }\r\n    async initSelect() {\r\n        if (this.useRouter) {\r\n            return;\r\n        }\r\n        // wait for all tabs to be ready\r\n        await Promise.all(this.tabs.map(tab => tab.componentOnReady()));\r\n        await this.select(this.tabs[0]);\r\n    }\r\n    setActive(selectedTab) {\r\n        if (this.transitioning) {\r\n            return Promise.reject('transitioning already happening');\r\n        }\r\n        this.transitioning = true;\r\n        this.leavingTab = this.selectedTab;\r\n        this.selectedTab = selectedTab;\r\n        this.ionTabsWillChange.emit({ tab: selectedTab.tab });\r\n        return selectedTab.setActive();\r\n    }\r\n    tabSwitch() {\r\n        const selectedTab = this.selectedTab;\r\n        const leavingTab = this.leavingTab;\r\n        this.leavingTab = undefined;\r\n        this.transitioning = false;\r\n        if (!selectedTab) {\r\n            return;\r\n        }\r\n        if (leavingTab !== selectedTab) {\r\n            if (leavingTab) {\r\n                leavingTab.active = false;\r\n            }\r\n            this.ionTabsDidChange.emit({ tab: selectedTab.tab });\r\n        }\r\n    }\r\n    notifyRouter() {\r\n        if (this.useRouter) {\r\n            const router = document.querySelector('ion-router');\r\n            if (router) {\r\n                return router.navChanged('forward');\r\n            }\r\n        }\r\n        return Promise.resolve(false);\r\n    }\r\n    shouldSwitch(selectedTab) {\r\n        const leavingTab = this.selectedTab;\r\n        return selectedTab !== undefined && selectedTab !== leavingTab && !this.transitioning;\r\n    }\r\n    render() {\r\n        return (h(Host, { onIonTabButtonClick: this.onTabClicked }, h(\"slot\", { name: \"top\" }), h(\"div\", { class: \"tabs-inner\" }, h(\"slot\", null)), h(\"slot\", { name: \"bottom\" })));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get style() { return \":host{left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;width:100%;height:100%;z-index:0}.tabs-inner,:host{contain:layout size style}.tabs-inner{position:relative;-ms-flex:1;flex:1}\"; }\r\n}\r\n\r\nexport { Tab as ion_tab, Tabs as ion_tabs };\r\n"],"sourceRoot":""}