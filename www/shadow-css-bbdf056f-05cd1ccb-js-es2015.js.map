{"version":3,"sources":["/./node_modules/@ionic/core/dist/esm/shadow-css-bbdf056f-05cd1ccb.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,oBAAoB;AAClE,uCAAuC,cAAc;AACrD,mCAAmC,uBAAuB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,mCAAmC,uBAAuB;AAC1D;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,YAAY;AACnF,gDAAgD;AAChD;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,GAAG;AAC/C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,aAAa;AACpE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,WAAW,GAAG,UAAU;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,WAAW;AACjD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sCAAsC,WAAW;AACjD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE,EAAE,cAAc,QAAQ,KAAK,UAAU;AACnE,sBAAsB;AACtB,qBAAqB;AACrB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,kBAAkB,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,cAAc,EAAE,aAAa,EAAE,OAAO;AACtF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE+B","file":"shadow-css-bbdf056f-05cd1ccb-js-es2015.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n *\r\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\r\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\r\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\r\n */\r\nclass ShadowCss {\r\n    constructor() {\r\n        this.strictStyling = true;\r\n    }\r\n    shimCssText(cssText, scopeId, hostScopeId = '', slotScopeId = '', commentOriginalSelector = false) {\r\n        const commentsWithHash = extractCommentsWithHash(cssText);\r\n        cssText = stripComments(cssText);\r\n        const orgSelectors = [];\r\n        if (commentOriginalSelector) {\r\n            const processCommentedSelector = (rule) => {\r\n                const placeholder = `/*!@___${orgSelectors.length}___*/`;\r\n                const comment = `/*!@${rule.selector}*/`;\r\n                orgSelectors.push({ placeholder, comment });\r\n                rule.selector = placeholder + rule.selector;\r\n                return rule;\r\n            };\r\n            cssText = processRules(cssText, rule => {\r\n                if (rule.selector[0] !== '@') {\r\n                    return processCommentedSelector(rule);\r\n                }\r\n                else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\r\n                    rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\r\n                    rule.content = processRules(rule.content, processCommentedSelector);\r\n                    return rule;\r\n                }\r\n                return rule;\r\n            });\r\n        }\r\n        const scopedCssText = this._scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\r\n        cssText = [scopedCssText, ...commentsWithHash].join('\\n');\r\n        if (commentOriginalSelector) {\r\n            orgSelectors.forEach(({ placeholder, comment }) => {\r\n                cssText = cssText.replace(placeholder, comment);\r\n            });\r\n        }\r\n        return cssText;\r\n    }\r\n    _scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\r\n        // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\r\n        cssText = this._insertPolyfillHostInCssText(cssText);\r\n        cssText = this._convertColonHost(cssText);\r\n        cssText = this._convertColonHostContext(cssText);\r\n        cssText = this._convertColonSlotted(cssText, slotScopeId);\r\n        cssText = this._convertShadowDOMSelectors(cssText);\r\n        if (scopeId) {\r\n            cssText = this._scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\r\n        }\r\n        cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\r\n        cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\r\n        return cssText.trim();\r\n    }\r\n    /*\r\n     * convert a rule like :host(.foo) > .bar { }\r\n     *\r\n     * to\r\n     *\r\n     * .foo<scopeName> > .bar\r\n    */\r\n    _convertColonHost(cssText) {\r\n        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);\r\n    }\r\n    /*\r\n   * convert a rule like ::slotted(.foo) { }\r\n  */\r\n    _convertColonSlotted(cssText, slotAttr) {\r\n        const regExp = _cssColonSlottedRe;\r\n        return cssText.replace(regExp, (...m) => {\r\n            if (m[2]) {\r\n                const compound = m[2].trim();\r\n                const suffix = m[3];\r\n                const sel = '.' + slotAttr + ' > ' + compound + suffix;\r\n                return sel;\r\n            }\r\n            else {\r\n                return _polyfillHostNoCombinator + m[3];\r\n            }\r\n        });\r\n    }\r\n    /*\r\n     * convert a rule like :host-context(.foo) > .bar { }\r\n     *\r\n     * to\r\n     *\r\n     * .foo<scopeName> > .bar, .foo scopeName > .bar { }\r\n     *\r\n     * and\r\n     *\r\n     * :host-context(.foo:host) .bar { ... }\r\n     *\r\n     * to\r\n     *\r\n     * .foo<scopeName> .bar { ... }\r\n    */\r\n    _convertColonHostContext(cssText) {\r\n        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);\r\n    }\r\n    _convertColonRule(cssText, regExp, partReplacer) {\r\n        // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\r\n        return cssText.replace(regExp, (...m) => {\r\n            if (m[2]) {\r\n                const parts = m[2].split(',');\r\n                const r = [];\r\n                for (let i = 0; i < parts.length; i++) {\r\n                    const p = parts[i].trim();\r\n                    if (!p)\r\n                        break;\r\n                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\r\n                }\r\n                return r.join(',');\r\n            }\r\n            else {\r\n                return _polyfillHostNoCombinator + m[3];\r\n            }\r\n        });\r\n    }\r\n    _colonHostContextPartReplacer(host, part, suffix) {\r\n        if (part.indexOf(_polyfillHost) > -1) {\r\n            return this._colonHostPartReplacer(host, part, suffix);\r\n        }\r\n        else {\r\n            return host + part + suffix + ', ' + part + ' ' + host + suffix;\r\n        }\r\n    }\r\n    _colonHostPartReplacer(host, part, suffix) {\r\n        return host + part.replace(_polyfillHost, '') + suffix;\r\n    }\r\n    /*\r\n     * Convert combinators like ::shadow and pseudo-elements like ::content\r\n     * by replacing with space.\r\n    */\r\n    _convertShadowDOMSelectors(cssText) {\r\n        return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\r\n    }\r\n    // change a selector like 'div' to 'name div'\r\n    _scopeSelectors(cssText, scopeSelector, hostSelector, slotSelector, commentOriginalSelector) {\r\n        return processRules(cssText, (rule) => {\r\n            let selector = rule.selector;\r\n            let content = rule.content;\r\n            if (rule.selector[0] !== '@') {\r\n                selector =\r\n                    this._scopeSelector(rule.selector, scopeSelector, hostSelector, slotSelector, this.strictStyling);\r\n            }\r\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\r\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\r\n                content = this._scopeSelectors(rule.content, scopeSelector, hostSelector, slotSelector, commentOriginalSelector);\r\n            }\r\n            selector = selector.replace(/\\s{2,}/g, ' ').trim();\r\n            return new CssRule(selector, content);\r\n        });\r\n    }\r\n    _scopeSelector(selector, scopeSelector, hostSelector, slotSelector, strict) {\r\n        return selector.split(',')\r\n            .map(shallowPart => {\r\n            if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\r\n                return shallowPart.trim();\r\n            }\r\n            if (this._selectorNeedsScoping(shallowPart, scopeSelector)) {\r\n                return strict ?\r\n                    this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector).trim() :\r\n                    this._applySelectorScope(shallowPart, scopeSelector, hostSelector).trim();\r\n            }\r\n            else {\r\n                return shallowPart.trim();\r\n            }\r\n        })\r\n            .join(', ');\r\n    }\r\n    _selectorNeedsScoping(selector, scopeSelector) {\r\n        const re = this._makeScopeMatcher(scopeSelector);\r\n        return !re.test(selector);\r\n    }\r\n    _makeScopeMatcher(scopeSelector) {\r\n        const lre = /\\[/g;\r\n        const rre = /\\]/g;\r\n        scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\r\n        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\r\n    }\r\n    _applySelectorScope(selector, scopeSelector, hostSelector) {\r\n        // Difference from webcomponents.js: scopeSelector could not be an array\r\n        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\r\n    }\r\n    // scope via name and [is=name]\r\n    _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\r\n        // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\r\n        _polyfillHostRe.lastIndex = 0;\r\n        if (_polyfillHostRe.test(selector)) {\r\n            const replaceBy = this.strictStyling ? `.${hostSelector}` : scopeSelector;\r\n            return selector\r\n                .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\r\n                return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\r\n                    return before + replaceBy + colon + after;\r\n                });\r\n            })\r\n                .replace(_polyfillHostRe, replaceBy + ' ');\r\n        }\r\n        return scopeSelector + ' ' + selector;\r\n    }\r\n    _applyStrictSelectorScope(selector, scopeSelector, hostSelector) {\r\n        const isRe = /\\[is=([^\\]]*)\\]/g;\r\n        scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\r\n        const className = '.' + scopeSelector;\r\n        const _scopeSelectorPart = (p) => {\r\n            let scopedP = p.trim();\r\n            if (!scopedP) {\r\n                return '';\r\n            }\r\n            if (p.indexOf(_polyfillHostNoCombinator) > -1) {\r\n                scopedP = this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\r\n            }\r\n            else {\r\n                // remove :host since it should be unnecessary\r\n                const t = p.replace(_polyfillHostRe, '');\r\n                if (t.length > 0) {\r\n                    const matches = t.match(/([^:]*)(:*)(.*)/);\r\n                    if (matches) {\r\n                        scopedP = matches[1] + className + matches[2] + matches[3];\r\n                    }\r\n                }\r\n            }\r\n            return scopedP;\r\n        };\r\n        const safeContent = new SafeSelector(selector);\r\n        selector = safeContent.content();\r\n        let scopedSelector = '';\r\n        let startIndex = 0;\r\n        let res;\r\n        const sep = /( |>|\\+|~(?!=))\\s*/g;\r\n        // If a selector appears before :host it should not be shimmed as it\r\n        // matches on ancestor elements and not on elements in the host's shadow\r\n        // `:host-context(div)` is transformed to\r\n        // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\r\n        // the `div` is not part of the component in the 2nd selectors and should not be scoped.\r\n        // Historically `component-tag:host` was matching the component so we also want to preserve\r\n        // this behavior to avoid breaking legacy apps (it should not match).\r\n        // The behavior should be:\r\n        // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\r\n        // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\r\n        //   `:host-context(tag)`)\r\n        const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\r\n        // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\r\n        let shouldScope = !hasHost;\r\n        while ((res = sep.exec(selector)) !== null) {\r\n            const separator = res[1];\r\n            const part = selector.slice(startIndex, res.index).trim();\r\n            shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n            const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\r\n            scopedSelector += `${scopedPart} ${separator} `;\r\n            startIndex = sep.lastIndex;\r\n        }\r\n        const part = selector.substring(startIndex);\r\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\r\n        scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\r\n        // replace the placeholders with their original values\r\n        return safeContent.restore(scopedSelector);\r\n    }\r\n    _insertPolyfillHostInCssText(selector) {\r\n        selector = selector\r\n            .replace(_colonHostContextRe, _polyfillHostContext)\r\n            .replace(_colonHostRe, _polyfillHost)\r\n            .replace(_colonSlottedRe, _polyfillSlotted);\r\n        return selector;\r\n    }\r\n}\r\nclass SafeSelector {\r\n    constructor(selector) {\r\n        this.placeholders = [];\r\n        this.index = 0;\r\n        // Replaces attribute selectors with placeholders.\r\n        // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\r\n        selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\r\n            const replaceBy = `__ph-${this.index}__`;\r\n            this.placeholders.push(keep);\r\n            this.index++;\r\n            return replaceBy;\r\n        });\r\n        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\r\n        // WS and \"+\" would otherwise be interpreted as selector separators.\r\n        this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\r\n            const replaceBy = `__ph-${this.index}__`;\r\n            this.placeholders.push(exp);\r\n            this.index++;\r\n            return pseudo + replaceBy;\r\n        });\r\n    }\r\n    restore(content) {\r\n        return content.replace(/__ph-(\\d+)__/g, (_, index) => this.placeholders[+index]);\r\n    }\r\n    content() { return this._content; }\r\n}\r\nclass CssRule {\r\n    constructor(selector, content) {\r\n        this.selector = selector;\r\n        this.content = content;\r\n    }\r\n}\r\nclass StringWithEscapedBlocks {\r\n    constructor(escapedString, blocks) {\r\n        this.escapedString = escapedString;\r\n        this.blocks = blocks;\r\n    }\r\n}\r\nconst _polyfillHost = '-shadowcsshost';\r\nconst _polyfillSlotted = '-shadowcssslotted';\r\n// note: :host-context pre-processed to -shadowcsshostcontext.\r\nconst _polyfillHostContext = '-shadowcsscontext';\r\nconst _parenSuffix = ')(?:\\\\((' +\r\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\r\n    ')\\\\))?([^,{]*)';\r\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\r\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\r\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\r\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\r\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\r\nconst _shadowDOMSelectorsRe = [\r\n    /::shadow/g,\r\n    /::content/g\r\n];\r\nconst _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\r\nconst _polyfillHostRe = /-shadowcsshost/gim;\r\nconst _colonHostRe = /:host/gim;\r\nconst _colonSlottedRe = /::slotted/gim;\r\nconst _colonHostContextRe = /:host-context/gim;\r\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\r\nconst stripComments = (input) => {\r\n    return input.replace(_commentRe, '');\r\n};\r\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\r\nconst extractCommentsWithHash = (input) => {\r\n    return input.match(_commentWithHashRe) || [];\r\n};\r\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\r\nconst _curlyRe = /([{}])/g;\r\nconst OPEN_CURLY = '{';\r\nconst CLOSE_CURLY = '}';\r\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\r\nconst processRules = (input, ruleCallback) => {\r\n    const inputWithEscapedBlocks = escapeBlocks(input);\r\n    let nextBlockIndex = 0;\r\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\r\n        const selector = m[2];\r\n        let content = '';\r\n        let suffix = m[4];\r\n        let contentPrefix = '';\r\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\r\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\r\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\r\n            contentPrefix = '{';\r\n        }\r\n        const rule = ruleCallback(new CssRule(selector, content));\r\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\r\n    });\r\n};\r\nconst escapeBlocks = (input) => {\r\n    const inputParts = input.split(_curlyRe);\r\n    const resultParts = [];\r\n    const escapedBlocks = [];\r\n    let bracketCount = 0;\r\n    let currentBlockParts = [];\r\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\r\n        const part = inputParts[partIndex];\r\n        if (part === CLOSE_CURLY) {\r\n            bracketCount--;\r\n        }\r\n        if (bracketCount > 0) {\r\n            currentBlockParts.push(part);\r\n        }\r\n        else {\r\n            if (currentBlockParts.length > 0) {\r\n                escapedBlocks.push(currentBlockParts.join(''));\r\n                resultParts.push(BLOCK_PLACEHOLDER);\r\n                currentBlockParts = [];\r\n            }\r\n            resultParts.push(part);\r\n        }\r\n        if (part === OPEN_CURLY) {\r\n            bracketCount++;\r\n        }\r\n    }\r\n    if (currentBlockParts.length > 0) {\r\n        escapedBlocks.push(currentBlockParts.join(''));\r\n        resultParts.push(BLOCK_PLACEHOLDER);\r\n    }\r\n    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\r\n};\r\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\r\n    const sc = new ShadowCss();\r\n    return sc.shimCssText(cssText, scopeId, scopeId + '-h', scopeId + '-s', commentOriginalSelector);\r\n};\r\n\r\nexport { ShadowCss, scopeCss };\r\n"],"sourceRoot":""}